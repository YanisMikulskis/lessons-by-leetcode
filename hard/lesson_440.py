class Solution:
    '''
    –î–∞–Ω—ã –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞: n –∏ k.

    –í–µ—Ä–Ω—É—Ç—å k-–π –ø–æ —Å—á—ë—Ç—É —ç–ª–µ–º–µ–Ω—Ç –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ n –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.

    ‚ÑπÔ∏è –ß—Ç–æ —Ç–∞–∫–æ–µ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫?
    –≠—Ç–æ –ø–æ—Ä—è–¥–æ–∫, –∫–∞–∫ –≤ —Å–ª–æ–≤–∞—Ä–µ. –¢–æ –µ—Å—Ç—å —á–∏—Å–ª–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏.

    –ü—Ä–∏–º–µ—Ä—ã:

    1 < 10 < 100 < 101 < 102 < 11 < 12 < 2 < 3 < ... < 9
    üßÆ –ü—Ä–∏–º–µ—Ä—ã:
    –ü—Ä–∏–º–µ—Ä 1:

    n = 13, k = 2
    –ß–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 13 –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ:

    1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9
    2-–µ —á–∏—Å–ª–æ –≤ —ç—Ç–æ–º –ø–æ—Ä—è–¥–∫–µ ‚Üí 10

    –û—Ç–≤–µ—Ç: 10
    '''
    def findKthNumber(self, n: int, k: int) -> int:
        # lex_nums = list(sorted(map(str, range(1, n + 1))))
        # print(lex_nums)
        # # ans = '1'
        # # new_res = []
        # # while len(new_res) < k:
        # #     new_res += [ans]
        # #     ans = str(int(ans) + 1)
        # #     new_res.sort()
        class Tree:
            def __init__(self, core):
                self.core = core
                self.left,self.right = None, None
            def make_branch(self, element):
                if element < self.core:
                    if self.left is None:
                        self.left = Tree(element)
                    else:
                        self.left.make_branch(element)
                else:
                    if self.right is None:
                        self.right = Tree(element)
                    else:
                        self.right.make_branch(element)


sol = Solution()
sol.findKthNumber(120,5)