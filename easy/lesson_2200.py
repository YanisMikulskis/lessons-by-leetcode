class Solution:
    '''
    –í–∞–º –¥–∞–Ω —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω—ã–π –º–∞—Å—Å–∏–≤ nums (–Ω—É–º–µ—Ä–∞—Ü–∏—è —Å –Ω—É–ª—è) –∏ –¥–≤–∞ —Ü–µ–ª—ã—Ö —á–∏—Å–ª–∞ ‚Äî key –∏ k.

    –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤—Å–µ –∏–Ω–¥–µ–∫—Å—ã i, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω–¥–µ–∫—Å j, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–π –¥–≤—É–º —É—Å–ª–æ–≤–∏—è–º:

    |i - j| <= k (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É i –∏ j –Ω–µ –±–æ–ª—å—à–µ k)
    nums[j] == key (–Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ j –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç key)
    –í–µ—Ä–Ω–∏—Ç–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —Å–ø–∏—Å–æ–∫ —Ç–∞–∫–∏—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ i.

    üß™ –ü—Ä–∏–º–µ—Ä—ã:
    –ü—Ä–∏–º–µ—Ä 1:

    nums = [3, 4, 9, 1, 3, 9, 5]
    key = 9
    k = 1
    üîç –ü–æ—è—Å–Ω–µ–Ω–∏–µ:

    –ò–Ω–¥–µ–∫—Å—ã, –≥–¥–µ nums[j] == 9: j = 2 –∏ j = 5
    –ò—â–µ–º –≤—Å–µ i, —Ç–∞–∫–∏–µ —á—Ç–æ |i - j| <= 1
    –î–ª—è j = 2: –¥–æ–ø—É—Å—Ç–∏–º—ã i = 1, 2, 3
    –î–ª—è j = 5: –¥–æ–ø—É—Å—Ç–∏–º—ã i = 4, 5, 6
    üìå –û—Ç–≤–µ—Ç: [1, 2, 3, 4, 5, 6]
    '''
    def findKDistantIndices(self, nums: list[int], key: int, k: int) -> list[int]:
        if len(set(nums)) == 1:
            return list(range(len(nums)))
        idxes = [idx for idx in range(len(nums)) if nums[idx] == key]
        res = []
        for j in idxes:
            res += [i for i in range(len(nums)) if abs(i - j) <= k and i not in res]


        # print(idxes)
        print(res)
        return res

sol = Solution()
print(sol.findKDistantIndices(nums = [3,4,9,1,3,9,5], key = 9, k = 1))
print(sol.findKDistantIndices(nums = [2,2,2,2,2], key = 2, k = 2))