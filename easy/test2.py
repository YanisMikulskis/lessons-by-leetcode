# from string import ascii_lowercase as alp
# class Solution:
#     '''
#     –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: –°—Ä–µ–¥–Ω–∏–π
#     –¢–µ–º—ã: –°—Ç—Ä–æ–∫–∏, –°–ø–∏—Å–∫–∏, –ì—Ä–∞—Ñ—ã, –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤ (Union-Find)
#
#     üìú –£—Å–ª–æ–≤–∏–µ (–ø–µ—Ä–µ–≤–æ–¥):
#     –¢–µ–±–µ –¥–∞–Ω—ã:
#
#     –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–π –¥–ª–∏–Ω—ã: s1 –∏ s2,
#     —Å—Ç—Ä–æ–∫–∞ baseStr.
#     –ö–∞–∂–¥–∞—è –ø–∞—Ä–∞ —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö –≤ s1 –∏ s2 —Å—á–∏—Ç–∞–µ—Ç—Å—è —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ–π.
#
#     ‚úÖ –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å –æ–∑–Ω–∞—á–∞–µ—Ç:
#
#     –ï—Å–ª–∏:
#
#     s1 = "abc"
#     s2 = "cde"
#     –¢–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã:
#
#     'a' == 'c'
#     'b' == 'd'
#     'c' == 'e'
#     –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º –æ—Ç–Ω–æ—à–µ–Ω–∏–π —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ—Å—Ç–∏:
#
#     –†–µ—Ñ–ª–µ–∫—Å–∏–≤–Ω–æ—Å—Ç—å: 'a' == 'a'
#     –°–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ—Å—Ç—å: –µ—Å–ª–∏ 'a' == 'b', —Ç–æ 'b' == 'a'
#     –¢—Ä–∞–Ω–∑–∏—Ç–∏–≤–Ω–æ—Å—Ç—å: –µ—Å–ª–∏ 'a' == 'b' –∏ 'b' == 'c', —Ç–æ 'a' == 'c'
#     üéØ –ó–∞–¥–∞—á–∞:
#     –ò—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–∞—Ö –∏–∑ s1 –∏ s2, –ø—Ä–µ–≤—Ä–∞—Ç–∏ —Å—Ç—Ä–æ–∫—É baseStr –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –Ω–∞–∏–º–µ–Ω—å—à—É—é —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—É—é —Å—Ç—Ä–æ–∫—É.
#
#     –¢–æ –µ—Å—Ç—å, –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ baseStr ‚Äî –∑–∞–º–µ–Ω–∏ –µ–≥–æ –Ω–∞ –Ω–∞–∏–º–µ–Ω—å—à–∏–π (–ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É) —Å–∏–º–≤–æ–ª –∏–∑ –µ–≥–æ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω–æ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–∞.
#     ‚úÖ –ü—Ä–∏–º–µ—Ä—ã:
#     –ü—Ä–∏–º–µ—Ä 1:
#
#     –í–≤–æ–¥:
#     s1 = "abc"
#     s2 = "cde"
#     baseStr = "eed"
#
#     –ü–æ—è—Å–Ω–µ–Ω–∏–µ:
#     –°–∏–º–≤–æ–ª—ã —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–Ω—ã:
#     'a' == 'c' == 'e'
#     'b' == 'd'
#
#     ‚Üí –¢–æ–≥–¥–∞ "eed" –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞:
#     - 'e' ‚Üí 'a'
#     - 'e' ‚Üí 'a'
#     - 'd' ‚Üí 'b'
#
#     –†–µ–∑—É–ª—å—Ç–∞—Ç:
#     "aab"
#     '''
#     def smallestEquivalentString(self, s1: str, s2: str, baseStr: str) -> str:
        # zip_list = list(zip(s1, s2))
        # graph = {
        #
        # }
        # for couple in zip_list:
        #     if couple[0] not in graph:
        #         graph.setdefault(couple[0], [])
        #     if couple[1] not in graph[couple[0]]:
        #         graph[couple[0]].append(couple[1])
        #
        #     if couple[1] not in graph:
        #         graph.setdefault(couple[1], [])
        #     if couple[0] not in graph[couple[1]]:
        #         graph[couple[1]].append(couple[0])
        #
        #
        # for k in graph:
        #     new_neight = set(graph[k])
        #     for val in graph[k]:
        #         new_neight.update(graph.get(val, []))
        #     new_neight.discard(k)
        #     graph[k] = list(new_neight)
        #
        #
        #
        #
        #
        # res = ''
        # for k in baseStr:
        #     try:
        #
        #         res += min([k, *graph[k]])
        #         # print(f'k = {k}  {graph[k]}')
        #     except KeyError:
        #
        #         res += k
        # return res








        #
        # for core, branch in graph.items():
        #     if branch in graph:





# sol = Solution()
# # sol.smallestEquivalentString(s1 = "abc", s2 = "cde", baseStr = "eed")
# print(sol.smallestEquivalentString("cgokcgerolkgksgbhgmaaealacnsshofjinidiigbjerdnkolc",
#                              "rjjlkbmnprkslilqmbnlasardrossiogrcboomrbcmgmglsrsj",
#                              "bxbwjlbdazfejdsaacsjgrlxqhiddwaeguxhqoupicyzfeupcn"))




class Solution:
    '''–î–∞–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ n.
    –ù—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ n –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º (—Å–ª–æ–≤–µ—Å–Ω–æ–º) –ø–æ—Ä—è–¥–∫–µ.

    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç:

    –∑–∞ O(n) –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç O(1) –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏ (–∫—Ä–æ–º–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    üìò –ß—Ç–æ –∑–Ω–∞—á–∏—Ç "–ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏"?
    –≠—Ç–æ –ø–æ—Ä—è–¥–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–ª–æ–≤–∞ –∏–¥—É—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ. –ß–∏—Å–ª–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏:

    "1" < "10" < "11" < "2" < "3" –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.
    ‚úÖ –ü—Ä–∏–º–µ—Ä—ã:
    üîπ –ü—Ä–∏–º–µ—Ä 1:

    –í—Ö–æ–¥:
    n = 13

    –í—ã—Ö–æ–¥:
    [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9]

    –ü–æ—è—Å–Ω–µ–Ω–∏–µ:
    –ß–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 13:
    [1, 2, 3, ..., 13]
    –ï—Å–ª–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏:
    ["1", "10", "11", "12", "13", "2", ..., "9"]
    '''
    def lexicalOrder(self, n: int) -> list[int]:


        def merge_sort(lst):
            if len(lst) <= 1:
                return lst

            middle = len(lst) // 2
            left, right = merge_sort(lst[:middle]),  merge_sort(lst[middle:])
            return merge(left, right)

        def merge(left, right):
            result = []
            i = j = 0
            while i < len(left) and j < len(right):
                if left[i] < right[j]:
                    result.append(left[i])
                    i += 1
                else:
                    result.append(right[j])
                    j += 1

            result.extend(left[i:]), result.extend(right[j:])
            return result

        def result_function():

            return list(map(int, merge_sort(list(map(str, range(1, n + 1))))))
        return result_function()





sol = Solution()
print(sol.lexicalOrder(13))