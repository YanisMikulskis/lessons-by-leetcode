class Solution:
    '''–î–∞–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ n.
    –ù—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –≤—Å–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ n –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ –ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º (—Å–ª–æ–≤–µ—Å–Ω–æ–º) –ø–æ—Ä—è–¥–∫–µ.

    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç:

    –∑–∞ O(n) –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç O(1) –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–∞–º—è—Ç–∏ (–∫—Ä–æ–º–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    üìò –ß—Ç–æ –∑–Ω–∞—á–∏—Ç "–ª–µ–∫—Å–∏–∫–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏"?
    –≠—Ç–æ –ø–æ—Ä—è–¥–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–ª–æ–≤–∞ –∏–¥—É—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ. –ß–∏—Å–ª–∞ —Å—Ä–∞–≤–Ω–∏–≤–∞—é—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏:

    "1" < "10" < "11" < "2" < "3" –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ.
    ‚úÖ –ü—Ä–∏–º–µ—Ä—ã:
    üîπ –ü—Ä–∏–º–µ—Ä 1:

    –í—Ö–æ–¥:
    n = 13

    –í—ã—Ö–æ–¥:
    [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9]

    –ü–æ—è—Å–Ω–µ–Ω–∏–µ:
    –ß–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 13:
    [1, 2, 3, ..., 13]
    –ï—Å–ª–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏:
    ["1", "10", "11", "12", "13", "2", ..., "9"]
    '''
    def lexicalOrder(self, n: int) -> list[int]:


        def merge_sort(lst):
            if len(lst) <= 1:
                return lst

            middle = len(lst) // 2
            left, right = merge_sort(lst[:middle]),  merge_sort(lst[middle:])
            return merge(left, right)

        def merge(left, right):
            result = []
            i = j = 0
            while i < len(left) and j < len(right):
                if left[i] < right[j]:
                    result.append(left[i])
                    i += 1
                else:
                    result.append(right[j])
                    j += 1

            result.extend(left[i:]), result.extend(right[j:])
            return result

        def result_function():

            return list(map(int, merge_sort(list(map(str, range(1, n + 1))))))
        return result_function()





sol = Solution()
print(sol.lexicalOrder(13))