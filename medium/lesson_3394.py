class Solution:
    '''
    –ü–µ—Ä–µ–≤–æ–¥ –∑–∞–¥–∞—á–∏ —Å LeetCode
    3394. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–∞–∑—Ä–µ–∑–∞—Ç—å —Å–µ—Ç–∫—É –Ω–∞ —Å–µ–∫—Ü–∏–∏

    –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: –°—Ä–µ–¥–Ω–∏–π

    –£—Å–ª–æ–≤–∏–µ
    –î–∞–Ω —Ä–∞–∑–º–µ—Ä n, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Ä–∞–∑–º–µ—Ä—ã n √ó n —Å–µ—Ç–∫–∏, –≥–¥–µ –Ω–∞—á–∞–ª–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (0,0) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ª–µ–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É.

    –¢–∞–∫–∂–µ –¥–∞–Ω –¥–≤—É–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤ rectangles, –≥–¥–µ:

    rectangles[i] = [startx, starty, endx, endy]
    –≠—Ç–æ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –Ω–∞ —Å–µ—Ç–∫–µ —Å:
    (startx, starty) ‚Äî –Ω–∏–∂–Ω–∏–π –ª–µ–≤—ã–π —É–≥–æ–ª,
    (endx, endy) ‚Äî –≤–µ—Ä—Ö–Ω–∏–π –ø—Ä–∞–≤—ã–π —É–≥–æ–ª.
    üîπ –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è.

    –ù—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –º–æ–∂–Ω–æ –ª–∏ —Ä–∞–∑—Ä–µ–∑–∞—Ç—å —Å–µ—Ç–∫—É –¥–≤—É–º—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ –∏–ª–∏ –¥–≤—É–º—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º–∏ –ª–∏–Ω–∏—è–º–∏ —Ç–∞–∫, —á—Ç–æ–±—ã:

    –ü–æ–ª—É—á–∏–ª–æ—Å—å 3 —Å–µ–∫—Ü–∏–∏, –∏ –∫–∞–∂–¥–∞—è –∏–∑ –Ω–∏—Ö —Å–æ–¥–µ—Ä–∂–∞–ª–∞ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫.
    –ö–∞–∂–¥—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞–ª —Ä–æ–≤–Ω–æ –æ–¥–Ω–æ–π —Å–µ–∫—Ü–∏–∏ (–Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–ª –≥—Ä–∞–Ω–∏—Ü—ã —Ä–∞–∑—Ä–µ–∑–∞).
    –í–µ—Ä–Ω–∏—Ç–µ true, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ —Ä–∞–∑—Ä–µ–∑—ã –≤–æ–∑–º–æ–∂–Ω—ã, –∏–Ω–∞—á–µ false.

    –ü—Ä–∏–º–µ—Ä—ã
    –ü—Ä–∏–º–µ—Ä 1

    üîπ –í—Ö–æ–¥:

    n = 4
    rectangles = [[1, 0, 3, 1], [0, 2, 4, 3], [2, 3, 3, 4]]
    üîπ –°–µ—Ç–∫–∞ (4√ó4) —Å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞–º–∏:

    . . . .  ‚Üê y = 3
    . ‚ñà ‚ñà .  ‚Üê y = 2
    ‚ñà ‚ñà ‚ñà ‚ñà  ‚Üê y = 1
    . ‚ñà ‚ñà .  ‚Üê y = 0
    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    0 1 2 3  ‚Üê x-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    ‚úÖ –í–æ–∑–º–æ–∂–Ω—ã–π —Ä–∞–∑—Ä–µ–∑ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏:

    |  . ‚ñà | ‚ñà .  |  ‚Üê y = 2
    |  ‚ñà ‚ñà | ‚ñà ‚ñà  |  ‚Üê y = 1
    |  . ‚ñà | ‚ñà .  |  ‚Üê y = 0
    ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    0    1    2    3
    ‚úÖ –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å!
    üîπ –í—ã—Ö–æ–¥: True
    '''
    def checkValidCuts(self, n: int, rectangles: list[list[int]]) -> bool:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ
        def horiz():
            y_s = [[i[1], i[3]] for i in rectangles]
            y_s.sort(key=lambda y:y[1])
            borders = [[k,v] for k,v in {i[0]:i[1] for i in y_s}.items()]
            return all([borders[i][1] <= borders[i + 1][1] for i in range(len(borders) - 1)])
        def vertic():
            x_s = [[i[0], i[2]] for i in rectangles] #–Ω–µ–ª—å–∑—è –ø–µ—Ä–µ—Å—Ç–∞–≤–ª—è—Ç—å?
            print(x_s)
            x_s.sort(key=lambda x:x[1])
            print(x_s)
            borders = [[k,v] for k,v in {i[0]:i[1] for i in x_s}.items()]
            return all([borders[i][1] <= borders[i + 1][1] for i in range(len(borders) - 1)])



        # print(horiz())
        print(vertic())
#



sol = Solution()
# sol.checkValidCuts(n = 5, rectangles = [[1,0,5,2],[0,2,2,4],[3,2,5,3],[0,4,4,5]])
sol.checkValidCuts(n = 4, rectangles = [[0,0,1,1],[1,0,3,4],[0,2,2,3],[3,0,4,3]])